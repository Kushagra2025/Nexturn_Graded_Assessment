Part 1

2. Find Orders for a Specific Customer

let customer = db.customers.findOne({ name: "John Doe" });
db.orders.find({ customer_id: customer._id });

3. Find the Customer for a Specific Order

let order = db.orders.findOne({ order_id: "ORD123456" });
db.customers.findOne({ _id: order.customer_id });

4. Update Order Status

db.orders.updateOne(
  { order_id: "ORD123456" },
  { $set: { status: "delivered" } }
);

5. Delete an Order

db.orders.deleteOne({ order_id: "ORD123456" });

Part 2

1. Calculate Total Value of All Orders by Customer

db.orders.aggregate([
  { $group: { _id: "$customer_id", totalSpent: { $sum: "$total_value" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  { $project: { "customerInfo.name": 1, totalSpent: 1, _id: 0 } },
]);

2. Group Orders by Status

db.orders.aggregate([{ $group: { _id: "$status", count: { $sum: 1 } } }]);

3. List Customers with Their Recent Orders

db.orders.aggregate([
  { $sort: { order_date: -1 } },
  { $group: { _id: "$customer_id", recentOrder: { $first: "$$ROOT" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  {
    $project: {
      "customerInfo.name": 1,
      "customerInfo.email": 1,
      "recentOrder.order_id": 1,
      "recentOrder.total_value": 1,
    },
  },
]);

4. Find the Most Expensive Order by Customer

db.orders.aggregate([
  { $sort: { total_value: -1 } },
  { $group: { _id: "$customer_id", mostExpensiveOrder: { $first: "$$ROOT" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  { $unwind: "$customerInfo" },
  {
    $project: {
      "customerInfo.name": 1,
      "mostExpensiveOrder.order_id": 1,
      "mostExpensiveOrder.total_value": 1,
    },
  },
]);

Part 3

1. Find All Customers Who Placed Orders in the Last Month

db.orders.aggregate([
  {
    $match: {
      order_date: {
        $gte: new Date(
          new Date("2023-07-23T18:45:00Z") - 30 * 24 * 60 * 60 * 1000
        ),
      },
    },
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  {
    $project: {
      "customerInfo.name": 1,
      "customerInfo.email": 1,
      order_date: 1,
    },
  },
]);

2. Find All Products Ordered by a Specific Customer:o Write a script to find all distinct products ordered by a customer with thename “John Doe”. Include the product name and the total quantityordered

const customer = db.customers.findOne({ name: "John Doe" });
db.orders.aggregate([
  { $match: { customer_id: customer._id } },
  { $unwind: "$items" },
  {
    $group: {
      _id: "$items.product_name",
      totalQuantity: { $sum: "$items.quantity" },
    },
  },
]);

3. Find the Top 3 Customers with the Most Expensive Total Orders

db.orders.aggregate([
  { $group: { _id: "$customer_id", totalSpent: { $sum: "$total_value" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  { $unwind: "$customerInfo" },
  { $sort: { totalSpent: -1 } },
  { $limit: 3 },
  { $project: { "customerInfo.name": 1, totalSpent: 1 } },
]);

4. Add a New Order for an Existing Customer

let customer = db.customers.findOne({ name: "Jane Smith" });
db.orders.insertOne({
  order_id: "ORD123461",
  customer_id: customer._id,
  order_date: new Date(),
  status: "pending",
  items: [
    { product_name: "Smartphone", quantity: 1, price: 700 },
    { product_name: "Headphones", quantity: 1, price: 150 },
  ],
  total_value: 850,
});

Part 4

1. Find Customers Who Have Not Placed Orders

db.customers.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "customer_id",
      as: "orders",
    },
  },
  { $match: { orders: { $size: 0 } } },
  { $project: { name: 1, email: 1 } },
]);

2. Calculate the Average Number of Items Ordered per order

db.orders.aggregate([
  { $unwind: "$items" },
  { $group: { _id: "$_id", itemCount: { $sum: "$items.quantity" } } },
  { $group: { _id: null, avgItemsPerOrder: { $avg: "$itemCount" } } },
]);

3. Join Customer and Order Data Using $lookup

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customerInfo",
    },
  },
  { $unwind: "$customerInfo" },
  {
    $project: {
      "customerInfo.name": 1,
      "customerInfo.email": 1,
      order_id: 1,
      total_value: 1,
      order_date: 1,
    },
  },
]);
